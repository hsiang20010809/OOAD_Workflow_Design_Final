## 整體架構概述
這是一個基於 Java Swing 的圖形化工作流程編輯器，讓使用者可以繪製、編輯和連接不同形狀，形成類似 UML 的圖表。
系統採用組合設計模式 (Composite Pattern) 來管理簡單圖形和複合圖形。

## 核心類別及其角色
1. Shape (抽象基類)
角色：所有圖形的基礎類別，定義共通行為和屬性
關鍵功能：
定義抽象方法如 draw()、contains()、getConnectionPorts() 等
管理標籤屬性（文字、顏色、大小、形狀）
處理選取狀態

2. Rect 和 Oval (具體圖形類別)
角色：Shape 的具體實現，分別代表矩形和橢圓形
關鍵功能：
實現繪製邏輯
定義特定形狀的連接點
判斷點擊是否在形狀內部

3. Composite (複合圖形類別)
角色：實現組合設計模式，允許將多個圖形作為一個整體處理
關鍵功能：
管理子圖形集合
協調子圖形的繪製和移動
群組操作的核心支援

4. Link (連接類別)
角色：處理圖形之間的連線關係
關鍵功能：
支援不同類型的連接線（關聯、泛化、組合）
繪製連接線和箭頭
追蹤和更新連接點位置

5. Canvas (畫布類別)
角色：核心繪圖區域，管理所有互動
關鍵功能：
處理滑鼠事件（點擊、拖曳、選擇）
管理圖形和連接線集合
負責繪製所有元素
實現選擇、群組、移動等操作

6. CustomLabelDialog (標籤編輯對話框)
角色：提供標籤自定義界面
關鍵功能：
允許編輯標籤文字、顏色、形狀和字體大小

7. WorkflowEditor (主程式類別)
角色：應用程式入口點和整體控制器
關鍵功能：
建立和管理主視窗和UI元件
處理按鈕事件和模式切換
協調各組件之間的互動

## 類別間關係
#繼承關係：

Rect、Oval、Composite 繼承自 Shape
Canvas 繼承自 JPanel

JPanel 是 Java Swing 圖形介面庫中的一個核心組件，它是一個容器類別，專門用於：
    1.作為繪圖的畫布
    2.容納其他 UI 組件
    3.處理使用者互動
當 Canvas 繼承 JPanel 時：
    1.獲得現有功能
        a.自動具備 JPanel 所有的繪圖能力
        b.繼承顯示管理、事件處理等基礎功能
        c.可以被加入到其他 Swing 容器中（如 JFrame）
    2.覆寫關鍵方法
        a.Canvas 覆寫了 paintComponent() 方法，實現自定義繪圖邏輯
        b.這是 Swing 建議的自定義繪圖標準方式
    3.事件處理
        a.繼承了事件監聽能力，可以處理滑鼠和鍵盤事件
        b.在你的程式中，Canvas 透過 addMouseListener() 等方法來處理使用者互動
在你專案中的應用:
    在你的工作流程編輯器中，Canvas 作為一個擴展的 JPanel：
        管理和繪製所有形狀和連線
        處理滑鼠事件來實現圖形的創建、選擇、移動等操作
        被放置在主視窗 (JFrame) 中央作為主要繪圖區域

#組合關係：

Canvas 包含 Shape 和 Link 集合
Composite 包含多個 Shape
WorkflowEditor 包含 Canvas 和 UI 元件

#依賴關係：

Link 依賴 Shape（連接需要形狀的起點和終點）
CustomLabelDialog 依賴 Shape（修改其標籤屬性）

#系統運作流程
初始化：

WorkflowEditor 創建主視窗和工具列
建立 Canvas 實例並設定事件監聽器

形狀創建：

用戶選擇形狀工具（Rect/Oval）並點擊畫布
Canvas 根據當前模式創建對應的形狀

選擇與移動：

用戶在 Select 模式下點擊形狀或框選多個形狀
拖曳選中的形狀時，Canvas 更新其位置並重新繪製

連接線創建：

用戶選擇連接線類型（Association/Generalization/Composition）
點擊起始形狀，再點擊目標形狀，建立連接

群組操作：

選擇多個形狀後點擊 Group 按鈕，創建 Composite
選擇一個 Composite 後點擊 UnGroup 按鈕，解散群組

標籤編輯：

選中形狀後，從 File Edit 選單選擇 label
CustomLabelDialog 開啟，允許修改標籤屬性